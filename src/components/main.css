@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
    .rainbow:before,
    .rainbow:after {
        background: rgb(0, 255, 0);
        background: linear-gradient(90deg, rgba(255, 0, 0, 1) 0%, rgba(255, 149, 0, 1) 15%, rgba(255, 253, 33, 1) 30%, rgba(0, 255, 0, 1) 45%, rgba(0, 7, 186, 1) 60%, rgba(54, 114, 230, 1) 75%, rgba(153, 54, 230, 1) 90%, rgba(222, 70, 255, 1) 100%);
    }

    .stripes {
        text-shadow: 0 1px 0 green;
    }

    .stripes:before,
    .stripes:after {
        background: repeating-linear-gradient(
                135deg,
                yellow,
                yellow 20px,
                black 20px,
                black 40px
        );
    }

    .stripes90 {
        background: repeating-linear-gradient(
                90deg,
                #00d6ab,
                #00d6ab 10px,
                #00ad99 10px,
                #00ad99 20px
        );
    }

    @property --num {
        syntax: '<integer>';
        initial-value: 0;
        inherits: false;
    }

    @keyframes counter {
        from {
            --num: 0;
        }
        to {
            --num: 9;
        }
    }

    .bubbles::before {
        background-repeat: no-repeat;
        background-image: radial-gradient(circle, deeppink 25%, transparent 30%),
        radial-gradient(circle, transparent 15%, deeppink 30%, transparent 20%),
        radial-gradient(circle, transparent 10%, white 25%, transparent 30%),
        radial-gradient(circle, deeppink 30%, transparent 10%),
        radial-gradient(circle, transparent 20%, deeppink 15%, transparent 25%),
        radial-gradient(circle, deeppink 20%, transparent 40%),
        radial-gradient(circle, transparent 25%, deeppink 20%, transparent 10%),
        radial-gradient(circle, deeppink 35%, transparent 15%),
        radial-gradient(circle, transparent 5%, deeppink 35%, transparent 20%),
        radial-gradient(circle, transparent 20%, deeppink 25%, transparent 10%),
        radial-gradient(circle, white 30%, transparent 20%),
        radial-gradient(circle, transparent 10%, white 20%, transparent 10%),
        radial-gradient(circle, deeppink 15%, transparent 35%),
        radial-gradient(circle, transparent 10%, deeppink 35%, transparent 5%),
        radial-gradient(circle, deeppink 25%, transparent 15%),
        radial-gradient(circle, transparent 20%, white 30%, transparent 10%);

        background-size: 15% 15%, 20% 20%, 18% 18%, 10% 10%, 20% 20%, 15% 15%,
        12% 12%, 25% 25%, 18% 18%, 20% 20%, 10% 10%, 22% 22%,
        15% 15%, 18% 18%, 20% 20%, 12% 12%;

        background-position: 18% 40%, 20% 31%, 30% 30%, 40% 30%, 50% 30%, 57% 30%,
        65% 30%, 80% 32%, 15% 60%, 83% 60%, 18% 70%, 25% 70%, 41% 70%, 50% 70%,
        64% 70%, 80% 71%;
    }

    .bubbles:hover::before {
        background-position: 5% 44%, -5% 20%, 7% 5%, 23% 0, 37% 0, 58% -2%, 80% 0, 100% -2%, -5% 80%, 100% 55%, 2% 100%, 23% 100%, 42% 100%, 60% 95%, 70% 96%, 100% 100%;
        background-size: 0 0;
    }

    .preserve3D {
        transform-style: preserve-3d;
    }

    .svgCircle {
        stroke-dasharray: 1;
        stroke-linecap: round;
        animation: svgCircleAnim 3s ease-in-out infinite alternate;
    }

    @keyframes svgCircleAnim {
        0% {
            stroke-dasharray: 1;
        }
        100% {
            stroke-dasharray: 10;
            transform: rotate(250deg);
        }
    }

    .labelCheck {
        input[type='checkbox']:disabled + label { /* +[plus sign] -> adjacent sibling selector */
            opacity: 0.5;
            text-decoration: line-through;
        }

        .redText {
            input[type='radio']:checked + label {
                color: red;
            }
        }
    }

    .rotateTranslate:hover {
        transform: rotateX(-90deg) translateZ(32px); /*css cascade rules and specificity*/
    }
    .rotateTranslate::after {
        transform: rotateX(90deg) translateZ(32px); /*css cascade rules and specificity*/
    }

    #toggleDropdown:checked ~ .dropdown { /* ~[tilde sign] -> subsequent sibling selector */
        top: -1rem;
        opacity: 1;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.225); /*(x1, y1, x2, y2)*/
      /*0.175 and 0.885: Control points for the start of the transition. The lower x1 value makes the transition start slowly, while y1 helps control the speed up.
        0.32 and 1.275: Control points for the end of the transition. x2 ensures it smooths out toward the end, while the higher y2 makes the end of the transition slightly overshoot, giving a "spring" effect before settling.*/
    }
}
